import { GetStaticProps } from 'next'
import fs from 'fs'
import { useEffect, useMemo, useState } from 'react';
import Head from 'next/head';

type Pergunta = {
  pergunta: string;
  resposta: {
    correta: string;
    outras: string[];
  }
}

type Props = {
  perguntas: Pergunta[]
}

export default function Home({ perguntas }: Props) {

  const [dat, setDat] = useState<string[]>([""]);
  const [question, setQuestion] = useState("");
  const [id, setId] = useState("");
  const [fazido, setFazido] = useState([])
  const [literal, setLiteral]= useState()
  const [count, setCount] = useState(
    Math.floor(Math.random() * perguntas.length - 1)
  );

  fazido.forEach(fazidoo => {
    if (fazidoo === count) {
      console.log("repetindo");
      setLiteral(fazidoo)
    }
  });



  if (count >= perguntas.length || count < 0 || literal === count) {
    const numeroAleatorio: number = Math.floor(Math.random() * perguntas.length) + 1;
    setCount(numeroAleatorio)
  } else {
    console.log("O número não é maior que 60.");
  }
  //if(fazido.includes("")){}
  const pergunta = useMemo(() => perguntas[count], [count]);
  const randomIntFromInterval = (min: number, max: number): number => {
    return Math.floor(Math.random() * (max - min + 1) + min);
  };

  useEffect(() => {
    setQuestion(pergunta?.pergunta || "");

    const filtradas: any[] = [];
    let nums: number[] = [];

    while (nums.length < 4) {
      let num = randomIntFromInterval(
        0,
        pergunta?.resposta.outras.length - 1
      );
      if (!nums.includes(num)) {
        nums.push(num);
        filtradas.push(pergunta?.resposta.outras[num]);
      }
    }

    filtradas.push(pergunta?.resposta.correta);
    filtradas.sort(() => Math.random() - 0.5);

    setDat(filtradas);
    setId(pergunta?.resposta.correta);
  }, [pergunta]);

  return (
    <>
      <Head>
        <title>Home</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className='bg-gray-400 h-screen flex justify-center'>
        <div className='capitalize'>
          <h1>{question}</h1>
          {dat.map((resposta, index) => (
            <p
              key={index}
              onClick={() => {
                if (resposta === id) {
                  let existingData: any = JSON.parse(String(localStorage.getItem("jogados")))
                  if (!existingData) {
                    existingData = [];
                  }
                  existingData.push({ question, resposta });
                  localStorage.setItem("jogados", JSON.stringify(existingData));
                  setCount(Math.floor(Math.random() * perguntas.length - 1))

                  let feitos: any = JSON.parse(String(localStorage.getItem("feitos")))
                  if (!feitos) {
                    feitos = [];
                  }
                  feitos.push(count);
                  setFazido(feitos)
                  localStorage.setItem("feitos", JSON.stringify(feitos));
                } else {
                  console.log("vc errou");
                }
              }}
              className='px-3 bg-[darkblue] my-1 py-2 cursor-pointer'>
              <span className='border-r-2 pr-3'>{["a", "b", "c", "d", "e"][index]}</span> <span className='pl-1'>{resposta}</span>
            </p>
          ))}
        </div>
      </main>
    </>
  )
}

export const getStaticProps: GetStaticProps<Props> = async () => {
  const filePath = `${process.cwd()}/db.json`
  const json = fs.readFileSync(filePath, 'utf8')
  const data: { perguntas: Pergunta[] } = JSON.parse(json)

  return { props: { perguntas: data.perguntas } }
}
